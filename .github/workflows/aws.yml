name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY  }}         # set this to your Amazon ECR repository name
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}                # set this to your Amazon ECS service name
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER  }}               # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION }} # set this to the path to your Amazon ECS task definition
                                                     # file, e.g.,.aws/task-definition.json
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME   }}        # set this to the name of the container in the
                                                     # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry: $ECR_REGISTRY

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "aws ecr-public describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "{\"ECR_REGISTRY\":\"$ECR_REGISTRY\",\"IMAGE_TAG\":\"$IMAGE_TAG\",\"ECR_REPOSITORY\":\"$ECR_REPOSITORY\"}" > ecr-details.json
        ls -la  # List files to verify ecr-details.json is created

    -  name: Create artifact with ECR details
       uses: actions/upload-artifact@v2
       with:
        name: ecr-details
        path: ecr-details.json
        run: |
          echo "{\"ECR_REGISTRY\":\"$ECR_REGISTRY\",\"IMAGE_TAG\":\"$IMAGE_TAG\",\"ECR_REPOSITORY\":\"$ECR_REPOSITORY\"}" > ecr-details.json

    - name: Download ECR details
      uses: actions/download-artifact@v2
      with:
        name: ecr-details
        path: .

    - name: Update ECS task definition and Deploy
      run: |
      
       REGISTRY=$(cat ecr-details.json | jq -r '.ECR_REGISTRY')
       TAG=$(cat ecr-details.json | jq -r '.IMAGE_TAG')
       REPO=$(cat ecr-details.json | jq -r '.ECR_REPOSITORY')
       TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$ECS_TASK_DEFINITION" --region "${AWS_REGION}")
       NEW_CONTAINER_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$REGISTRY/$REPO:$TAG" '.taskDefinition.containerDefinitions[0].image = $IMAGE |.taskDefinition.containerDefinitions[0]')
       aws ecs register-task-definition --region "${AWS_REGION}" --family "${ECS_TASK_DEFINITION}" --container-definitions "${NEW_CONTAINER_DEFINITION}" --memory 3GB --requires-compatibilities FARGATE --network-mode awsvpc --cpu 1024 --execution-role-arn arn:aws:iam::127355576263:role/ecsTaskExecutionRole-eastus1-dev-sl
       aws ecs list-clusters --region "${AWS_REGION}"
       aws ecs update-service --region "${AWS_REGION}" --cluster "${ECS_CLUSTER}" --service "${ECS_SERVICE}"  --task-definition "${ECS_TASK_DEFINITION}"  
